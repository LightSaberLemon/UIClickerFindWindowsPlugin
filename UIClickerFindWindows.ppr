{
    Copyright (C) 2024 VCC
    creation date: 14 Jan 2024
    initial release date: 15 Jan 2024

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}


library UIClickerFindWindows;

{$H+}
{$IFDEF FPC}
  //{$MODE Delphi}
{$ENDIF}

uses
  Windows, Interfaces, Classes, SysUtils,
  ClickerUtils, ClickerActionPlugins, DllUtils;


type
  TStringArr = array of string;

  TWindowFeatures = record
    TopLeftCorner: TPoint;
    BotLeftCorner: TPoint;
    TopRightCorner: TPoint;
    BotRightCorner: TPoint;

    TopLeftCornerSrcIdx: Integer; //primitive order index  - two corners have to match the same index, to be part of the same window
    BotLeftCornerSrcIdx: Integer; //primitive order index
    TopRightCornerSrcIdx: Integer; //primitive order index
    BotRightCornerSrcIdx: Integer; //primitive order index
  end;

  TWindowFeaturesArr = array of TWindowFeatures;

const
  CMaxRequiredSubControlActions = 8;
  CAdditionalPropertiesCount = 3;
  CPropertiesCount = CMaxRequiredSubControlActions + CAdditionalPropertiesCount;

  CParentFindControlPropertyName = 'ParentFindControl';

  CRequiredSubControlPropertyNames: array[0..CPropertiesCount - 1] of string = (  //these are the expected FindSubControl property names, configured in plugin properties
    'FindSubControlTopLeftCorner',
    'FindSubControlBotLeftCorner',
    'FindSubControlTopRightCorner',
    'FindSubControlBotRightCorner',
    'FindSubControlLeftEdge',
    'FindSubControlTopEdge',
    'FindSubControlRightEdge',
    'FindSubControlBottomEdge',

    CParentFindControlPropertyName,  //This action is called before every FindSubControl action above. It can also be a CallTemplate action (with FindControl and FindSubControl). It is required to prepare the $Control_Left$ and $Control_Top$ vars for every FindSubControl.
    'BorderThicknessList',
    'Reserved'
  );

  //See TOIEditorType datatype from ObjectInspectorFrame.pas, for valid values
  CRequiredSubControlPropertyTypes: array[0..CPropertiesCount - 1] of string = (
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',

    'TextWithArrow',
    'Text',
    'BooleanCombo'
  );

  CDefaultBorderThickness = 5;


{ToDo:
  - implement corners and edges processing - DecodeWindows
  - experiment with WideChar as used by ClickerClient
  - refactoring in ExecutePlugin
  - handle windows which are of the same width and x position, or of the same height and y position, (overlapped or not)
}


function GetAPIVersion: DWord; cdecl;
begin
  Result := CActionPlugin_APIVersion;
end;


procedure GetListOfProperties(AListOfProperties: Pointer; AListOfPropertiesLen: PDWord); cdecl;
var
  Properties: string;
  i: Integer;
begin
  Properties := '';

  for i := 0 to CPropertiesCount - 1 do
    Properties := Properties + CRequiredSubControlPropertyNames[i] + '=' + CRequiredSubControlPropertyTypes[i] + #13#10;

  AListOfPropertiesLen^ := SetPointedContentFromString(Properties, AListOfProperties);
end;


procedure StringListToIntArr(AStringList: TStringList; var AIntArr: TIntArr);
var
  i: Integer;
  s: string;
begin
  SetLength(AIntArr, AStringList.Count);
  for i := 0 to AStringList.Count - 1 do
  begin
    s := AStringList.Strings[i];

    if Pos('txt[', s) > 0 then
      s := StringReplace(s, 'txt[', '', [rfReplaceAll]);

    if Pos('bmp[', s) > 0 then
      s := StringReplace(s, 'bmp[', '', [rfReplaceAll]);

    if Pos('pmtv[', s) > 0 then
      s := StringReplace(s, 'pmtv[', '', [rfReplaceAll]);

    if Pos(']', s) > 0 then
      s := StringReplace(s, ']', '', [rfReplaceAll]);

    AIntArr[i] := StrToIntDef(s, -1);
  end;
end;


procedure SetCornerAsIntArr(AXOffsets, AYOffsets, AMatchSource: TStringList; var ACorner_XOffsetsIntArr, ACorner_YOffsetsIntArr, ACorner_SrcIdx: TIntArr);
begin
  StringListToIntArr(AXOffsets, ACorner_XOffsetsIntArr);
  StringListToIntArr(AYOffsets, ACorner_YOffsetsIntArr);
  StringListToIntArr(AMatchSource, ACorner_SrcIdx);
end;


//function IndexOfTopLeftCorner(var AWindowFeaturesArr: TWindowFeaturesArr; AXOffset, AYOffset, ASrcIdx: Integer): Integer;
//var
//  i: Integer;
//begin
//  Result := -1;
//
//  for i := 0 to Length(AWindowFeaturesArr) - 1 do
//    if (AWindowFeaturesArr[i].TopLeftCorner.X = AXOffset) and
//       (AWindowFeaturesArr[i].TopLeftCorner.Y = AYOffset) and
//       (AWindowFeaturesArr[i].TopLeftCornerSrcIdx = ASrcIdx) then
//    begin
//      Result := i;
//      Break;
//    end;
//end;


function IndexOfBotLeftCorner(var AWindowFeaturesArr: TWindowFeaturesArr; AXOffset, AYOffset, ASrcIdx: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;

  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    if (AWindowFeaturesArr[i].BotLeftCorner.X = AXOffset) and
       (AWindowFeaturesArr[i].BotLeftCorner.Y = AYOffset) and
       (AWindowFeaturesArr[i].BotLeftCornerSrcIdx = ASrcIdx) then
    begin
      Result := i;
      Break;
    end;
end;


function IndexOfTopRightCorner(var AWindowFeaturesArr: TWindowFeaturesArr; AXOffset, AYOffset, ASrcIdx: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;

  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    if (AWindowFeaturesArr[i].TopRightCorner.X = AXOffset) and
       (AWindowFeaturesArr[i].TopRightCorner.Y = AYOffset) and
       (AWindowFeaturesArr[i].TopRightCornerSrcIdx = ASrcIdx) then
    begin
      Result := i;
      Break;
    end;
end;


//function IndexOfBotRightCorner(var AWindowFeaturesArr: TWindowFeaturesArr; AXOffset, AYOffset, ASrcIdx: Integer): Integer;
//var
//  i: Integer;
//begin
//  Result := -1;
//
//  for i := 0 to Length(AWindowFeaturesArr) - 1 do
//    if (AWindowFeaturesArr[i].BotRightCorner.X = AXOffset) and
//       (AWindowFeaturesArr[i].BotRightCorner.Y = AYOffset) and
//       (AWindowFeaturesArr[i].BotRightCornerSrcIdx = ASrcIdx) then
//    begin
//      Result := i;
//      Break;
//    end;
//end;


procedure InitWindowFeatures(var AWindowFeatures: TWindowFeatures);
begin
  AWindowFeatures.TopLeftCorner.X := -1;
  AWindowFeatures.TopLeftCorner.Y := -1;

  AWindowFeatures.BotLeftCorner.X := -1;
  AWindowFeatures.BotLeftCorner.Y := -1;

  AWindowFeatures.TopRightCorner.X := -1;
  AWindowFeatures.TopRightCorner.Y := -1;

  AWindowFeatures.BotRightCorner.X := -1;
  AWindowFeatures.BotRightCorner.Y := -1;

  AWindowFeatures.TopLeftCornerSrcIdx := -1;
  AWindowFeatures.BotLeftCornerSrcIdx := -1;
  AWindowFeatures.TopRightCornerSrcIdx := -1;
  AWindowFeatures.BotRightCornerSrcIdx := -1;
end;


function AvailableCornersCountInWindow(var AWindowFeatures: TWindowFeatures): Integer;
begin
  Result := 0;
  Inc(Result, Ord(AWindowFeatures.TopLeftCornerSrcIdx > -1));
  Inc(Result, Ord(AWindowFeatures.BotLeftCornerSrcIdx > -1));
  Inc(Result, Ord(AWindowFeatures.TopRightCornerSrcIdx > -1));
  Inc(Result, Ord(AWindowFeatures.BotRightCornerSrcIdx > -1));
end;


//'WinLeft_0=30' + #4#5 + 'WinTop_0=90' + #4#5 + 'WinRight_0=250' + #4#5 + 'WinBottom_0=400' + #4#5;  //this example may change
procedure DecodeWindows(var AllFindSubControlExecutionResults: TStringArr; out ResultsX, ResultsY, ResultsW, ResultsH: string);
var
  AllVars, XOffsets, YOffsets, MatchSource: TStringList;
  i, j: Integer;
  AllControl_XOffsets, AllControl_YOffsets, AllControl_MatchSource: string;
  WindowFeaturesArr: TWindowFeaturesArr;

  TopLeftCorner_XOffsetsIntArr, TopLeftCorner_YOffsetsIntArr, TopLeftCorner_SrcIdx: TIntArr;
  BotLeftCorner_XOffsetsIntArr, BotLeftCorner_YOffsetsIntArr, BotLeftCorner_SrcIdx: TIntArr;
  TopRightCorner_XOffsetsIntArr, TopRightCorner_YOffsetsIntArr, TopRightCorner_SrcIdx: TIntArr;
  BotRightCorner_XOffsetsIntArr, BotRightCorner_YOffsetsIntArr, BotRightCorner_SrcIdx: TIntArr;
begin
  for j := 0 to Length(AllFindSubControlExecutionResults) - 1 do
  begin
    AllVars := TStringList.Create;
    try
      AllVars.Text := AllFindSubControlExecutionResults[j];

      AllControl_XOffsets := AllVars.Values['$AllControl_XOffsets$'];       //example: 19460544
      AllControl_YOffsets := AllVars.Values['$AllControl_YOffsets$'];       //example: 244188428
      AllControl_MatchSource := AllVars.Values['$AllControl_MatchSource$']; //example: pmtv[0]pmtv[1]pmtv[1]

      XOffsets := TStringList.Create;
      YOffsets := TStringList.Create;
      MatchSource := TStringList.Create;
      try
        XOffsets.Text := FastReplace_45ToReturn(AllControl_XOffsets);
        YOffsets.Text := FastReplace_45ToReturn(AllControl_YOffsets);
        MatchSource.Text := FastReplace_45ToReturn(AllControl_MatchSource);

        case j of
          0:
            SetCornerAsIntArr(XOffsets, YOffsets, MatchSource, TopLeftCorner_XOffsetsIntArr, TopLeftCorner_YOffsetsIntArr, TopLeftCorner_SrcIdx);

          1:
            SetCornerAsIntArr(XOffsets, YOffsets, MatchSource, BotLeftCorner_XOffsetsIntArr, BotLeftCorner_YOffsetsIntArr, BotLeftCorner_SrcIdx);

          2:
            SetCornerAsIntArr(XOffsets, YOffsets, MatchSource, TopRightCorner_XOffsetsIntArr, TopRightCorner_YOffsetsIntArr, TopRightCorner_SrcIdx);

          3:
            SetCornerAsIntArr(XOffsets, YOffsets, MatchSource, BotRightCorner_XOffsetsIntArr, BotRightCorner_YOffsetsIntArr, BotRightCorner_SrcIdx);
        end; //case
      finally
        XOffsets.Free;
        YOffsets.Free;
        MatchSource.Free;
      end;
    finally
      AllVars.Free;
    end;
  end; //for j

  //matching TopLeft corner with BotLeft, then TopRight
  for i := 0 to Length(TopLeftCorner_XOffsetsIntArr) - 1 do
  begin
    for j := 0 to Length(BotLeftCorner_XOffsetsIntArr) - 1 do
      if (TopLeftCorner_XOffsetsIntArr[i] = BotLeftCorner_XOffsetsIntArr[j]) and
         (TopLeftCorner_SrcIdx[i] = BotLeftCorner_SrcIdx[j]) then
      begin
        SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
        InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.X := TopLeftCorner_XOffsetsIntArr[i];
        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.Y := TopLeftCorner_YOffsetsIntArr[i];
        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCornerSrcIdx := TopLeftCorner_SrcIdx[i];
      end;

    for j := 0 to Length(TopRightCorner_YOffsetsIntArr) - 1 do
      if (TopLeftCorner_YOffsetsIntArr[i] = TopRightCorner_YOffsetsIntArr[j]) and
         (TopLeftCorner_SrcIdx[i] = TopRightCorner_SrcIdx[j]) then
      begin
        SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
        InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.X := TopLeftCorner_XOffsetsIntArr[i];
        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.Y := TopLeftCorner_YOffsetsIntArr[i];
        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCornerSrcIdx := TopLeftCorner_SrcIdx[i];
      end;
  end; //for i

  //matching BotRight corner with BotLeft, then TopRight
  for i := 0 to Length(BotRightCorner_XOffsetsIntArr) - 1 do
  begin
    for j := 0 to Length(BotLeftCorner_XOffsetsIntArr) - 1 do
      if (BotRightCorner_YOffsetsIntArr[i] = BotLeftCorner_YOffsetsIntArr[j]) and
         (BotRightCorner_SrcIdx[i] = BotLeftCorner_SrcIdx[j]) then
      begin
        SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
        InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.X := BotRightCorner_XOffsetsIntArr[i];
        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.Y := BotRightCorner_YOffsetsIntArr[i];
        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCornerSrcIdx := BotRightCorner_SrcIdx[i];
      end;

    for j := 0 to Length(TopRightCorner_YOffsetsIntArr) - 1 do
      if (BotRightCorner_XOffsetsIntArr[i] = TopRightCorner_XOffsetsIntArr[j]) and
         (BotRightCorner_SrcIdx[i] = TopRightCorner_SrcIdx[j]) then
      begin
        SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
        InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.X := BotRightCorner_XOffsetsIntArr[i];
        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.Y := BotRightCorner_YOffsetsIntArr[i];
        WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCornerSrcIdx := BotRightCorner_SrcIdx[i];
      end;
  end; //for i

  //use IndexOfTopLeftCorner functions   //if IndexOfBotRightCorner();

  //matching BotLeft corner with TopLeft, then BotRight
  for i := 0 to Length(BotLeftCorner_XOffsetsIntArr) - 1 do
  begin
    for j := 0 to Length(TopLeftCorner_XOffsetsIntArr) - 1 do
      if (BotLeftCorner_XOffsetsIntArr[i] = TopLeftCorner_XOffsetsIntArr[j]) and
         (BotLeftCorner_XOffsetsIntArr[i] = TopLeftCorner_SrcIdx[j]) then
        if IndexOfBotLeftCorner(WindowFeaturesArr, BotLeftCorner_XOffsetsIntArr[i], BotLeftCorner_YOffsetsIntArr[i], BotLeftCorner_SrcIdx[i]) = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.X := BotLeftCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.Y := BotLeftCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCornerSrcIdx := BotLeftCorner_SrcIdx[i];
        end;

    for j := 0 to Length(BotRightCorner_YOffsetsIntArr) - 1 do
      if (BotLeftCorner_YOffsetsIntArr[i] = BotRightCorner_YOffsetsIntArr[j]) and
         (BotLeftCorner_SrcIdx[i] = BotRightCorner_SrcIdx[j]) then
        if IndexOfBotLeftCorner(WindowFeaturesArr, BotLeftCorner_XOffsetsIntArr[i], BotLeftCorner_YOffsetsIntArr[i], BotLeftCorner_SrcIdx[i]) = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.X := BotLeftCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.Y := BotLeftCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCornerSrcIdx := BotLeftCorner_SrcIdx[i];
        end;
  end;

  //matching TopRight corner with TopLeft, then BotRight
  for i := 0 to Length(TopRightCorner_YOffsetsIntArr) - 1 do
  begin
    for j := 0 to Length(TopLeftCorner_XOffsetsIntArr) - 1 do
      if (TopRightCorner_YOffsetsIntArr[i] = TopLeftCorner_YOffsetsIntArr[j]) and
         (TopRightCorner_SrcIdx[i] = TopLeftCorner_SrcIdx[j]) then
        if IndexOfTopRightCorner(WindowFeaturesArr, TopRightCorner_XOffsetsIntArr[i], TopRightCorner_YOffsetsIntArr[i], TopRightCorner_SrcIdx[i]) = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.X := TopRightCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.Y := TopRightCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCornerSrcIdx := TopRightCorner_SrcIdx[i];
        end;

    for j := 0 to Length(TopRightCorner_XOffsetsIntArr) - 1 do
      if (TopRightCorner_XOffsetsIntArr[i] = BotRightCorner_XOffsetsIntArr[j]) and
         (TopRightCorner_SrcIdx[i] = BotRightCorner_SrcIdx[j]) then
        if IndexOfTopRightCorner(WindowFeaturesArr, TopRightCorner_XOffsetsIntArr[i], TopRightCorner_YOffsetsIntArr[i], TopRightCorner_SrcIdx[i]) = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.X := TopRightCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.Y := TopRightCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCornerSrcIdx := TopRightCorner_SrcIdx[i];
        end;
  end;

  ResultsX := '';
  ResultsY := '';
  ResultsW := '';
  ResultsH := '';

  for i := 0 to Length(WindowFeaturesArr) - 1 do
    if AvailableCornersCountInWindow(WindowFeaturesArr[i]) >= 3 then
    begin
      ResultsX := ResultsX + IntToStr(WindowFeaturesArr[i].TopLeftCorner.X) + #4#5;
      ResultsY := ResultsY + IntToStr(WindowFeaturesArr[i].TopLeftCorner.Y) + #4#5;
      ResultsW := ResultsW + IntToStr(WindowFeaturesArr[i].TopLeftCorner.X + WindowFeaturesArr[i].TopRightCorner.X + CDefaultBorderThickness) + #4#5;
      ResultsH := ResultsH + IntToStr(WindowFeaturesArr[i].TopLeftCorner.Y + WindowFeaturesArr[i].BotLeftCorner.Y + CDefaultBorderThickness) + #4#5;
    end;
end;


procedure GetAllRequiredFindSubControlActionNames(APluginSettings: TStringList; var AAllRequiredFindSubControlNames: TStringArr);
var
  i, j: Integer;
begin
  for i := 0 to APluginSettings.Count - 1 do   //assume more properties are there, besides FindSubControl action names for corners and edges
    for j := 0 to CMaxRequiredSubControlActions - 1 do
      if APluginSettings.Names[i] = CRequiredSubControlPropertyNames[j] then
      begin
        SetLength(AAllRequiredFindSubControlNames, Length(AAllRequiredFindSubControlNames) + 1);
        AAllRequiredFindSubControlNames[Length(AAllRequiredFindSubControlNames) - 1] := APluginSettings.ValueFromIndex[i];
        Break;
      end;
end;


//ToDo:   refactoring
function ExecutePlugin(APluginReference: Pointer;
                       AListOfPluginSettings: Pointer;
                       AListOfPluginSettingsLen: PDWord;

                       AOnActionPlugin_GetActionCount: TOnActionPlugin_GetActionCount;
                       AOnActionPlugin_GetActionInfoByIndex: TOnActionPlugin_GetActionInfoByIndex;
                       AOnActionPlugin_ExecuteAction: TOnActionPlugin_ExecuteAction;
                       AOnActionPlugin_GetAllTemplateVars: TOnActionPlugin_GetAllTemplateVars;
                       AOnActionPlugin_SetTemplateVar: TOnActionPlugin_SetTemplateVar): Boolean; cdecl;
var
  ActionCount, i, j: Integer;
  ActionType: TClkAction;
  ActionTypeDWord, NameLengthDWord, ListOfPluginSettingsLen: DWord;
  s, Buffer: string;
  ActionNamePtr, AllTemplateVarsPtr: Pointer;
  ResName, ResValue, PluginSettingsStr, AllVarsStr: string;
  PluginSettings: TStringList;
  AllRequiredFindSubControlNames: TStringArr;
  AllFindSubControlExecutionResults: TStringArr;
  ResultsX, ResultsY, ResultsW, ResultsH: string;
begin
  Result := False;

  ActionCount := AOnActionPlugin_GetActionCount(APluginReference);
  if ActionCount = 0 then
  begin
    ResName := CActionPlugin_ExecutionResultErrorVar;
    ResValue := 'This plugin does not run on an empty template.';
    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
    Exit;
  end;

  ResValue := '';
  ResName := '$PluginError$';
  AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

  ResName := '$AllControl_XOffsets$';
  AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

  ResName := '$AllControl_YOffsets$';
  AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

  ListOfPluginSettingsLen := AListOfPluginSettingsLen^;

  PluginSettings := TStringList.Create;
  try
    SetLength(PluginSettingsStr, CMaxSharedStringLength);
    SetPointedContentToString(AListOfPluginSettings, PluginSettingsStr);
    SetLength(PluginSettingsStr, ListOfPluginSettingsLen);
    PluginSettings.Text := PluginSettingsStr;
    GetAllRequiredFindSubControlActionNames(PluginSettings, AllRequiredFindSubControlNames);

    s := 'unset action';
    for i := 0 to ActionCount - 1 do
    begin
      SetLength(Buffer, CMaxSharedStringLength + 1);
      ActionNamePtr := @Buffer[1];
      NameLengthDWord := 0;

      AOnActionPlugin_GetActionInfoByIndex(APluginReference, i, ActionNamePtr, @NameLengthDWord, @ActionTypeDWord);
      SetPointedContentToString(ActionNamePtr, s);
      SetLength(s, NameLengthDWord);

      if ActionTypeDWord <> $FFFFFFFF then
      begin
        ActionType := TClkAction(ActionTypeDWord);

        if ActionType = acFindSubControl then
          for j := 0 to CMaxRequiredSubControlActions - 1 do
            if s = AllRequiredFindSubControlNames[j] then
            begin
              if PluginSettings.ValueFromIndex[8] <> '' then
                if not AOnActionPlugin_ExecuteAction(APluginReference, @PluginSettings.ValueFromIndex[8][1]) then  //call FindControl or CallTemplate, before each FindSubControl
                begin
                  ResName := CActionPlugin_ExecutionResultErrorVar;
                  ResValue := 'The required "' + PluginSettings.ValueFromIndex[8] + '" action has failed: ' + s;  //example
                  AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                  Exit;
                end;

              if not AOnActionPlugin_ExecuteAction(APluginReference, @s[1]) then
              begin
                //ResName := CActionPlugin_ExecutionResultErrorVar;
                //ResValue := 'One of the required FindSubControl actions has failed: ' + s;  //example
                //AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                //Exit;
              end;

              SetLength(Buffer, CMaxSharedStringLength + 1);
              AllTemplateVarsPtr := @Buffer[1];
              NameLengthDWord := 0;

              AOnActionPlugin_GetAllTemplateVars(APluginReference, AllTemplateVarsPtr, @NameLengthDWord);  //decode action execution results

              SetPointedContentToString(AllTemplateVarsPtr, AllVarsStr);
              SetLength(AllVarsStr, NameLengthDWord);

              SetLength(AllFindSubControlExecutionResults, Length(AllFindSubControlExecutionResults) + 1);
              AllFindSubControlExecutionResults[Length(AllFindSubControlExecutionResults) - 1] := AllVarsStr;
            end;
      end;
    end;   //for

    if Length(AllFindSubControlExecutionResults) <> CMaxRequiredSubControlActions then
    begin
      ResName := CActionPlugin_ExecutionResultErrorVar;
      ResValue := 'Not all the required FindSubControl actions are found in the current template.  PluginSettings: ' + PluginSettingsStr;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
      Exit;
    end;

    DecodeWindows(AllFindSubControlExecutionResults, ResultsX, ResultsY, ResultsW, ResultsH);

    ResName := CActionPlugin_ExecutionResultVar_XOffset;
    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResultsX[1]);

    ResName := CActionPlugin_ExecutionResultVar_YOffset;
    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResultsY[1]);

    ResName := CActionPlugin_ExecutionResultVar_Width;
    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResultsW[1]);

    ResName := CActionPlugin_ExecutionResultVar_Height;
    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResultsH[1]);
  finally
    PluginSettings.Free;
  end;

  Result := True;
end;


exports
  GetAPIVersion,
  GetListOfProperties,
  ExecutePlugin;

begin
end.

