{
    Copyright (C) 2024 VCC
    creation date: 14 Jan 2024
    initial release date: 15 Jan 2024

    author: VCC
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}


library UIClickerFindWindows;

{$H+}
{$IFDEF FPC}
  //{$MODE Delphi}
{$ENDIF}

uses
  Windows, Interfaces, Classes, SysUtils,
  ClickerUtils, ClickerActionPlugins, DllUtils;


type
  TStringArr = array of string;

  TWindowFeatures = record
    TopLeftCorner: TPoint;
    BotLeftCorner: TPoint;
    TopRightCorner: TPoint;
    BotRightCorner: TPoint;

    TopLeftCornerSrcIdx: Integer; //primitive order index  - two corners have to match the same index, to be part of the same window
    BotLeftCornerSrcIdx: Integer; //primitive order index
    TopRightCornerSrcIdx: Integer; //primitive order index
    BotRightCornerSrcIdx: Integer; //primitive order index
  end;

  TWindowFeaturesArr = array of TWindowFeatures;

const
  CMaxRequiredSubControlActions = 8;
  CAdditionalPropertiesCount = 3;
  CPropertiesCount = CMaxRequiredSubControlActions + CAdditionalPropertiesCount;

  CParentFindControlPropertyName = 'ParentFindControl';
  CBorderThicknessPropertyName = 'BorderThickness';
  CMatchWindowEdgesPropertyName = 'MatchWindowEdges';

  CRequiredSubControlPropertyNames: array[0..CPropertiesCount - 1] of string = (  //these are the expected FindSubControl property names, configured in plugin properties
    'FindSubControlTopLeftCorner',
    'FindSubControlBotLeftCorner',
    'FindSubControlTopRightCorner',
    'FindSubControlBotRightCorner',
    'FindSubControlLeftEdge',
    'FindSubControlTopEdge',
    'FindSubControlRightEdge',
    'FindSubControlBottomEdge',

    CParentFindControlPropertyName,  //This action is called before every FindSubControl action above. It can also be a CallTemplate action (with FindControl and FindSubControl). It is required to prepare the $Control_Left$ and $Control_Top$ vars for every FindSubControl.
    CBorderThicknessPropertyName,
    CMatchWindowEdgesPropertyName
  );

  //See TOIEditorType datatype from ObjectInspectorFrame.pas, for valid values
  CRequiredSubControlPropertyTypes: array[0..CPropertiesCount - 1] of string = (
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',
    'TextWithArrow',

    'TextWithArrow',
    'Text',
    'BooleanCombo'
  );

  CDefaultBorderThickness = 6;

  CFindSubControlTopLeftCorner_PropIndex = 0;
  CFindSubControlBotLeftCorner_PropIndex = 1;
  CFindSubControlTopRightCorner_PropIndex = 2;
  CFindSubControlBotRightCorner_PropIndex = 3;
  CFindSubControlLeftEdge_PropIndex = 4;
  CFindSubControlTopEdge_PropIndex = 5;
  CFindSubControlRightEdge_PropIndex = 6;
  CFindSubControlBottomEdge_PropIndex = 7;
  CParentFindControl_PropIndex = 8;
  CBorderThickness_PropIndex = 9;
  CMatchWindowEdges_PropIndex = 10;

  CActionPlugin_ExecutionResultVar_XOffset = '$DecodedWindows_XOffset$';
  CActionPlugin_ExecutionResultVar_YOffset = '$DecodedWindows_YOffset$';
  CActionPlugin_ExecutionResultVar_Width = '$DecodedWindows_Control_Width$';
  CActionPlugin_ExecutionResultVar_Height = '$DecodedWindows_Control_Height$';

  CActionPlugin_ExecutionResultVar_Control_Lefts = '$DecodedWindows_Control_Lefts$';
  CActionPlugin_ExecutionResultVar_Control_Tops = '$DecodedWindows_Control_Tops$';
  CActionPlugin_ExecutionResultVar_Control_Rights = '$DecodedWindows_Control_Rights$';
  CActionPlugin_ExecutionResultVar_Control_Bottoms = '$DecodedWindows_Control_Bottoms$';

  CEdgeNames: array[CFindSubControlLeftEdge_PropIndex..CFindSubControlBottomEdge_PropIndex] of string = (   //for debugging
    'Left', 'Top', 'Right', 'Bottom'
  );

  CActionPlugin_SearchArea_WinEdgeLeftVar = '$SearchArea_WinEdgeLeft$';
  CActionPlugin_SearchArea_WinEdgeTopVar = '$SearchArea_WinEdgeTop$';
  CActionPlugin_SearchArea_WinEdgeRightVar = '$SearchArea_WinEdgeRight$';
  CActionPlugin_SearchArea_WinEdgeBottomVar = '$SearchArea_WinEdgeBottom$';

{ToDo:
 - [in work] - implement corners and edges processing - DecodeWindows
  - experiment with WideChar as used by ClickerClient
  - refactoring in ExecutePlugin
  - handle windows which are of the same width and x position, or of the same height and y position, (overlapped or not)
}


function GetAPIVersion: DWord; cdecl;
begin
  Result := CActionPlugin_APIVersion;
end;


procedure GetListOfProperties(AListOfProperties: Pointer; AListOfPropertiesLen: PDWord); cdecl;
var
  Properties: string;
  i: Integer;
begin
  Properties := '';

  for i := 0 to CPropertiesCount - 1 do
    Properties := Properties + CRequiredSubControlPropertyNames[i] + '=' + CRequiredSubControlPropertyTypes[i] + #13#10;

  AListOfPropertiesLen^ := SetPointedContentFromString(Properties, AListOfProperties);
end;


procedure StringListToIntArr(AStringList: TStringList; var AIntArr: TIntArr);
var
  i: Integer;
  s: string;
begin
  SetLength(AIntArr, AStringList.Count);
  for i := 0 to AStringList.Count - 1 do
  begin
    s := AStringList.Strings[i];

    if Pos('txt[', s) > 0 then
      s := StringReplace(s, 'txt[', '', [rfReplaceAll]);

    if Pos('bmp[', s) > 0 then
      s := StringReplace(s, 'bmp[', '', [rfReplaceAll]);

    if Pos('pmtv[', s) > 0 then
      s := StringReplace(s, 'pmtv[', '', [rfReplaceAll]);

    if Pos(']', s) > 0 then
      s := StringReplace(s, ']', '', [rfReplaceAll]);

    AIntArr[i] := StrToIntDef(s, -1);
  end;
end;


procedure SetCornerAsIntArr(AXOffsets, AYOffsets, AMatchSource: TStringList; var ACorner_XOffsetsIntArr, ACorner_YOffsetsIntArr, ACorner_SrcIdx: TIntArr);
begin
  StringListToIntArr(AXOffsets, ACorner_XOffsetsIntArr);
  StringListToIntArr(AYOffsets, ACorner_YOffsetsIntArr);
  StringListToIntArr(AMatchSource, ACorner_SrcIdx);
end;


function IndexOfTopLeftCorner(var AWindowFeaturesArr: TWindowFeaturesArr; AXOffset, AYOffset, ASrcIdx: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;

  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    if (AWindowFeaturesArr[i].TopLeftCorner.X = AXOffset) and
       (AWindowFeaturesArr[i].TopLeftCorner.Y = AYOffset) and
       (AWindowFeaturesArr[i].TopLeftCornerSrcIdx = ASrcIdx) then
    begin
      Result := i;
      Break;
    end;
end;


function IndexOfBotLeftCorner(var AWindowFeaturesArr: TWindowFeaturesArr; AXOffset, AYOffset, ASrcIdx: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;

  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    if (AWindowFeaturesArr[i].BotLeftCorner.X = AXOffset) and
       (AWindowFeaturesArr[i].BotLeftCorner.Y = AYOffset) and
       (AWindowFeaturesArr[i].BotLeftCornerSrcIdx = ASrcIdx) then
    begin
      Result := i;
      Break;
    end;
end;


function IndexOfTopRightCorner(var AWindowFeaturesArr: TWindowFeaturesArr; AXOffset, AYOffset, ASrcIdx: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;

  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    if (AWindowFeaturesArr[i].TopRightCorner.X = AXOffset) and
       (AWindowFeaturesArr[i].TopRightCorner.Y = AYOffset) and
       (AWindowFeaturesArr[i].TopRightCornerSrcIdx = ASrcIdx) then
    begin
      Result := i;
      Break;
    end;
end;


function IndexOfBotRightCorner(var AWindowFeaturesArr: TWindowFeaturesArr; AXOffset, AYOffset, ASrcIdx: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;

  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    if (AWindowFeaturesArr[i].BotRightCorner.X = AXOffset) and
       (AWindowFeaturesArr[i].BotRightCorner.Y = AYOffset) and
       (AWindowFeaturesArr[i].BotRightCornerSrcIdx = ASrcIdx) then
    begin
      Result := i;
      Break;
    end;
end;


procedure InitWindowFeatures(var AWindowFeatures: TWindowFeatures);
begin
  AWindowFeatures.TopLeftCorner.X := -1;
  AWindowFeatures.TopLeftCorner.Y := -1;

  AWindowFeatures.BotLeftCorner.X := -1;
  AWindowFeatures.BotLeftCorner.Y := -1;

  AWindowFeatures.TopRightCorner.X := -1;
  AWindowFeatures.TopRightCorner.Y := -1;

  AWindowFeatures.BotRightCorner.X := -1;
  AWindowFeatures.BotRightCorner.Y := -1;

  AWindowFeatures.TopLeftCornerSrcIdx := -1;
  AWindowFeatures.BotLeftCornerSrcIdx := -1;
  AWindowFeatures.TopRightCornerSrcIdx := -1;
  AWindowFeatures.BotRightCornerSrcIdx := -1;
end;


function AvailableCornersCountInWindow(var AWindowFeatures: TWindowFeatures): Integer;
begin
  Result := 0;
  Inc(Result, Ord(AWindowFeatures.TopLeftCornerSrcIdx > -1));
  Inc(Result, Ord(AWindowFeatures.BotLeftCornerSrcIdx > -1));
  Inc(Result, Ord(AWindowFeatures.TopRightCornerSrcIdx > -1));
  Inc(Result, Ord(AWindowFeatures.BotRightCornerSrcIdx > -1));
end;


procedure DeleteItemFromWindowFeaturesArr(var AWindowFeaturesArr: TWindowFeaturesArr; AIndex: Integer);
var
  i: Integer;
begin
  for i := AIndex to Length(AWindowFeaturesArr) - 2 do
    AWindowFeaturesArr[i] := AWindowFeaturesArr[i + 1];

  SetLength(AWindowFeaturesArr, Length(AWindowFeaturesArr) - 1);
end;


procedure GetValidItemsFromWindowFeaturesArr(var AWindowFeaturesArr, AValidWindowFeaturesArr: TWindowFeaturesArr);
var
  i: Integer;
begin
  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    if AvailableCornersCountInWindow(AWindowFeaturesArr[i]) >= 3 then
    begin
      SetLength(AValidWindowFeaturesArr, Length(AValidWindowFeaturesArr) + 1);
      AValidWindowFeaturesArr[Length(AValidWindowFeaturesArr) - 1] := AWindowFeaturesArr[i];
    end;
end;


function IndexOfWindowFeaturesItem(var AWindowFeaturesArr: TWindowFeaturesArr; AItem: TWindowFeatures; AExcludeIndex: Integer): Integer;
var
  i: Integer;
begin
  Result := -1;
  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    if i <> AExcludeIndex then
      if (AWindowFeaturesArr[i].TopLeftCorner = AItem.TopLeftCorner) and
         (AWindowFeaturesArr[i].BotLeftCorner = AItem.BotLeftCorner) and
         (AWindowFeaturesArr[i].TopRightCorner = AItem.TopRightCorner) and
         (AWindowFeaturesArr[i].BotRightCorner = AItem.BotRightCorner) and
         (AWindowFeaturesArr[i].TopLeftCornerSrcIdx = AItem.TopLeftCornerSrcIdx) and
         (AWindowFeaturesArr[i].BotLeftCornerSrcIdx = AItem.BotLeftCornerSrcIdx) and
         (AWindowFeaturesArr[i].TopRightCornerSrcIdx = AItem.TopRightCornerSrcIdx) and
         (AWindowFeaturesArr[i].BotRightCornerSrcIdx = AItem.BotRightCornerSrcIdx) then
      begin
        Result := i;
        Exit;
      end;
end;


//This procedure assumes that AItem is valid, i.e. it contain at least 3 corners.
procedure FillInMissingCorner(var AItem: TWindowFeatures);
begin
  if AItem.TopLeftCornerSrcIdx = -1 then
  begin
    AItem.TopLeftCorner.X := AItem.BotLeftCorner.X;
    AItem.TopLeftCorner.Y := AItem.TopRightCorner.Y;
    AItem.TopLeftCornerSrcIdx := AItem.BotLeftCornerSrcIdx;
    Exit;
  end;

  if AItem.BotLeftCornerSrcIdx = -1 then
  begin
    AItem.BotLeftCorner.X := AItem.TopLeftCorner.X;
    AItem.BotLeftCorner.Y := AItem.BotRightCorner.Y;
    AItem.BotLeftCornerSrcIdx := AItem.TopLeftCornerSrcIdx;
    Exit;
  end;

  if AItem.TopRightCornerSrcIdx = -1 then
  begin
    AItem.TopRightCorner.X := AItem.BotRightCorner.X;
    AItem.TopRightCorner.Y := AItem.TopLeftCorner.Y;
    AItem.TopRightCornerSrcIdx := AItem.BotRightCornerSrcIdx;
    Exit;
  end;

  if AItem.BotRightCornerSrcIdx = -1 then
  begin
    AItem.BotRightCorner.X := AItem.TopRightCorner.X;
    AItem.BotRightCorner.Y := AItem.BotLeftCorner.Y;
    AItem.BotRightCornerSrcIdx := AItem.TopRightCornerSrcIdx;
    Exit;
  end;
end;


//This procedure assumes that AWindowFeaturesArr has valid items, i.e. they contain at least 3 corners.
procedure MergeWindowFeaturesArrDuplicates(var AWindowFeaturesArr, ADeDup: TWindowFeaturesArr);
var
  i, DupIdx: Integer;
begin
  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    FillInMissingCorner(AWindowFeaturesArr[i]);

  SetLength(ADeDup, 0);
  for i := Length(AWindowFeaturesArr) - 1 downto 0 do
  begin
    DupIdx := IndexOfWindowFeaturesItem(AWindowFeaturesArr, AWindowFeaturesArr[i], i);

    if DupIdx > -1 then
      DeleteItemFromWindowFeaturesArr(AWindowFeaturesArr, DupIdx);
  end;

  //reverse the array, so it looks better
  SetLength(ADeDup, Length(AWindowFeaturesArr));
  for i := 0 to Length(AWindowFeaturesArr) - 1 do
    ADeDup[Length(ADeDup) - i - 1] := AWindowFeaturesArr[i];
end;


type
  TDecodedWindowsResults = record
    ResultsX, ResultsY, ResultsW, ResultsH: string;
    ControlLefts, ControlTops, ControlRights, ControlBottoms: string;
  end;


procedure WindowFeaturesArrToString(var AWindowFeaturesArr: TWindowFeaturesArr; AControl_Left, AControl_Top, ABorderThickness: Integer; out ADecodedWindowsResults: TDecodedWindowsResults);
var
  i: Integer;
begin
  ADecodedWindowsResults.ResultsX := '';
  ADecodedWindowsResults.ResultsY := '';
  ADecodedWindowsResults.ResultsW := '';
  ADecodedWindowsResults.ResultsH := '';

  ADecodedWindowsResults.ControlLefts := '';
  ADecodedWindowsResults.ControlTops := '';
  ADecodedWindowsResults.ControlRights := '';
  ADecodedWindowsResults.ControlBottoms := '';

  //DbgStr := '';

  for i := 0 to Length(AWindowFeaturesArr) - 1 do
  begin
    //DbgStr := DbgStr + 'TL = ' + IntToStr(AWindowFeaturesArr[i].TopLeftCorner.X) + ':' +
    //                             IntToStr(AWindowFeaturesArr[i].TopLeftCorner.Y) + ' : ' +
    //                             IntToStr(AWindowFeaturesArr[i].TopLeftCornerSrcIdx) + '.   ' +
    //                   'BL = ' + IntToStr(AWindowFeaturesArr[i].BotLeftCorner.X) + ':' +
    //                             IntToStr(AWindowFeaturesArr[i].BotLeftCorner.Y) + ' : ' +
    //                             IntToStr(AWindowFeaturesArr[i].BotLeftCornerSrcIdx) + '.   ' +
    //                   'TR = ' + IntToStr(AWindowFeaturesArr[i].TopRightCorner.X) + ':' +
    //                             IntToStr(AWindowFeaturesArr[i].TopRightCorner.Y) + ' : ' +
    //                             IntToStr(AWindowFeaturesArr[i].TopRightCornerSrcIdx) + '.   ' +
    //                   'BR = ' + IntToStr(AWindowFeaturesArr[i].BotRightCorner.X) + ':' +
    //                             IntToStr(AWindowFeaturesArr[i].BotRightCorner.Y) + ' : ' +
    //                             IntToStr(AWindowFeaturesArr[i].BotRightCornerSrcIdx) + '.   ' + #13#10;

    //Requires a bit of refactoring:
    ADecodedWindowsResults.ResultsX := ADecodedWindowsResults.ResultsX + IntToStr(AWindowFeaturesArr[i].TopLeftCorner.X) + #4#5;
    ADecodedWindowsResults.ResultsY := ADecodedWindowsResults.ResultsY + IntToStr(AWindowFeaturesArr[i].TopLeftCorner.Y) + #4#5;
    ADecodedWindowsResults.ResultsW := ADecodedWindowsResults.ResultsW + IntToStr(AWindowFeaturesArr[i].TopLeftCorner.X + AWindowFeaturesArr[i].TopRightCorner.X + ABorderThickness) + #4#5;
    ADecodedWindowsResults.ResultsH := ADecodedWindowsResults.ResultsH + IntToStr(AWindowFeaturesArr[i].TopLeftCorner.Y + AWindowFeaturesArr[i].BotLeftCorner.Y + ABorderThickness) + #4#5;

    ADecodedWindowsResults.ControlLefts := ADecodedWindowsResults.ControlLefts + IntToStr(AWindowFeaturesArr[i].TopLeftCorner.X + AControl_Left) + #4#5;
    ADecodedWindowsResults.ControlTops := ADecodedWindowsResults.ControlTops + IntToStr(AWindowFeaturesArr[i].TopLeftCorner.Y + AControl_Top) + #4#5;
    ADecodedWindowsResults.ControlRights := ADecodedWindowsResults.ControlRights + IntToStr(AWindowFeaturesArr[i].TopRightCorner.X + ABorderThickness + AControl_Left) + #4#5;
    ADecodedWindowsResults.ControlBottoms := ADecodedWindowsResults.ControlBottoms + IntToStr(AWindowFeaturesArr[i].BotLeftCorner.Y + ABorderThickness + AControl_Top) + #4#5;
  end;

  //MessageBox(0, PChar(DbgStr), 'Plugin', MB_ICONINFORMATION);
end;


//'WinLeft_0=30' + #4#5 + 'WinTop_0=90' + #4#5 + 'WinRight_0=250' + #4#5 + 'WinBottom_0=400' + #4#5;  //this example may change
procedure DecodeWindows(var AllFindSubControlExecutionResults: TStringArr; var WindowFeaturesArr: TWindowFeaturesArr);
var
  AllVars, XOffsets, YOffsets, MatchSource: TStringList;
  i, j: Integer;
  CornerIndex: Integer;
  AllControl_XOffsets, AllControl_YOffsets, AllControl_MatchSource: string;
  ValidWindowFeaturesArr: TWindowFeaturesArr;

  TopLeftCorner_XOffsetsIntArr, TopLeftCorner_YOffsetsIntArr, TopLeftCorner_SrcIdx: TIntArr;
  BotLeftCorner_XOffsetsIntArr, BotLeftCorner_YOffsetsIntArr, BotLeftCorner_SrcIdx: TIntArr;
  TopRightCorner_XOffsetsIntArr, TopRightCorner_YOffsetsIntArr, TopRightCorner_SrcIdx: TIntArr;
  BotRightCorner_XOffsetsIntArr, BotRightCorner_YOffsetsIntArr, BotRightCorner_SrcIdx: TIntArr;

  //DbgStr: string;
begin
  for j := 0 to Length(AllFindSubControlExecutionResults) - 1 do
  begin
    AllVars := TStringList.Create;
    try
      AllVars.Text := AllFindSubControlExecutionResults[j];

      AllControl_XOffsets := AllVars.Values['$AllControl_XOffsets$'];       //example: 19460544
      AllControl_YOffsets := AllVars.Values['$AllControl_YOffsets$'];       //example: 244188428
      AllControl_MatchSource := AllVars.Values['$AllControl_MatchSource$']; //example: pmtv[0]pmtv[1]pmtv[1]

      XOffsets := TStringList.Create;
      YOffsets := TStringList.Create;
      MatchSource := TStringList.Create;
      try
        XOffsets.Text := FastReplace_45ToReturn(AllControl_XOffsets);
        YOffsets.Text := FastReplace_45ToReturn(AllControl_YOffsets);
        MatchSource.Text := FastReplace_45ToReturn(AllControl_MatchSource);

        case j of
          CFindSubControlTopLeftCorner_PropIndex:
            SetCornerAsIntArr(XOffsets, YOffsets, MatchSource, TopLeftCorner_XOffsetsIntArr, TopLeftCorner_YOffsetsIntArr, TopLeftCorner_SrcIdx);

          CFindSubControlBotLeftCorner_PropIndex:
            SetCornerAsIntArr(XOffsets, YOffsets, MatchSource, BotLeftCorner_XOffsetsIntArr, BotLeftCorner_YOffsetsIntArr, BotLeftCorner_SrcIdx);

          CFindSubControlTopRightCorner_PropIndex:
            SetCornerAsIntArr(XOffsets, YOffsets, MatchSource, TopRightCorner_XOffsetsIntArr, TopRightCorner_YOffsetsIntArr, TopRightCorner_SrcIdx);

          CFindSubControlBotRightCorner_PropIndex:
            SetCornerAsIntArr(XOffsets, YOffsets, MatchSource, BotRightCorner_XOffsetsIntArr, BotRightCorner_YOffsetsIntArr, BotRightCorner_SrcIdx);
        end; //case
      finally
        XOffsets.Free;
        YOffsets.Free;
        MatchSource.Free;
      end;
    finally
      AllVars.Free;
    end;
  end; //for j

  SetLength(WindowFeaturesArr, 0);

  //matching TopLeft corner with BotLeft, then TopRight
  for i := 0 to Length(TopLeftCorner_XOffsetsIntArr) - 1 do
  begin
    CornerIndex := IndexOfTopLeftCorner(WindowFeaturesArr, TopLeftCorner_XOffsetsIntArr[i], TopLeftCorner_YOffsetsIntArr[i], TopLeftCorner_SrcIdx[i]);
    for j := 0 to Length(BotLeftCorner_XOffsetsIntArr) - 1 do
      if (TopLeftCorner_XOffsetsIntArr[i] = BotLeftCorner_XOffsetsIntArr[j]) and
         (TopLeftCorner_SrcIdx[i] = BotLeftCorner_SrcIdx[j]) then   //the same SrcIdx means the two corners were found with the same FindSubControl settings.
      begin
        if CornerIndex = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.X := TopLeftCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.Y := TopLeftCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCornerSrcIdx := TopLeftCorner_SrcIdx[i];

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.X := BotLeftCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.Y := BotLeftCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCornerSrcIdx := BotLeftCorner_SrcIdx[j];
        end
        else
        begin
          WindowFeaturesArr[CornerIndex].BotLeftCorner.X := BotLeftCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].BotLeftCorner.Y := BotLeftCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].BotLeftCornerSrcIdx := BotLeftCorner_SrcIdx[j];
        end;
      end;

    //CornerIndex has to be updated again here:
    CornerIndex := IndexOfTopLeftCorner(WindowFeaturesArr, TopLeftCorner_XOffsetsIntArr[i], TopLeftCorner_YOffsetsIntArr[i], TopLeftCorner_SrcIdx[i]);
    for j := 0 to Length(TopRightCorner_YOffsetsIntArr) - 1 do
      if (TopLeftCorner_YOffsetsIntArr[i] = TopRightCorner_YOffsetsIntArr[j]) and
         (TopLeftCorner_SrcIdx[i] = TopRightCorner_SrcIdx[j]) then
      begin
        if CornerIndex = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.X := TopLeftCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.Y := TopLeftCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCornerSrcIdx := TopLeftCorner_SrcIdx[i];

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.X := TopRightCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.Y := TopRightCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCornerSrcIdx := TopRightCorner_SrcIdx[j];
        end
        else
        begin
          WindowFeaturesArr[CornerIndex].TopRightCorner.X := TopRightCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].TopRightCorner.Y := TopRightCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].TopRightCornerSrcIdx := TopRightCorner_SrcIdx[j];
        end;
      end;
  end; //for i

  //matching BotRight corner with BotLeft, then TopRight
  for i := 0 to Length(BotRightCorner_XOffsetsIntArr) - 1 do
  begin
    CornerIndex := IndexOfBotRightCorner(WindowFeaturesArr, BotRightCorner_XOffsetsIntArr[i], BotRightCorner_YOffsetsIntArr[i], BotRightCorner_SrcIdx[i]);
    for j := 0 to Length(BotLeftCorner_XOffsetsIntArr) - 1 do
      if (BotRightCorner_YOffsetsIntArr[i] = BotLeftCorner_YOffsetsIntArr[j]) and
         (BotRightCorner_SrcIdx[i] = BotLeftCorner_SrcIdx[j]) then
      begin
        if CornerIndex = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.X := BotRightCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.Y := BotRightCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCornerSrcIdx := BotRightCorner_SrcIdx[i];

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.X := BotLeftCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.Y := BotLeftCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCornerSrcIdx := BotLeftCorner_SrcIdx[j];
        end
        else
        begin
          WindowFeaturesArr[CornerIndex].BotLeftCorner.X := BotLeftCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].BotLeftCorner.Y := BotLeftCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].BotLeftCornerSrcIdx := BotLeftCorner_SrcIdx[j];
        end;
      end;

    CornerIndex := IndexOfBotRightCorner(WindowFeaturesArr, BotRightCorner_XOffsetsIntArr[i], BotRightCorner_YOffsetsIntArr[i], BotRightCorner_SrcIdx[i]);
    for j := 0 to Length(TopRightCorner_YOffsetsIntArr) - 1 do
      if (BotRightCorner_XOffsetsIntArr[i] = TopRightCorner_XOffsetsIntArr[j]) and
         (BotRightCorner_SrcIdx[i] = TopRightCorner_SrcIdx[j]) then
      begin
        if CornerIndex = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.X := BotRightCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.Y := BotRightCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCornerSrcIdx := BotRightCorner_SrcIdx[i];

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.X := TopRightCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.Y := TopRightCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCornerSrcIdx := TopRightCorner_SrcIdx[j];
        end
        else
        begin
          WindowFeaturesArr[CornerIndex].TopRightCorner.X := TopRightCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].TopRightCorner.Y := TopRightCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].TopRightCornerSrcIdx := TopRightCorner_SrcIdx[j];
        end;
      end;
  end; //for i

  //matching BotLeft corner with TopLeft, then BotRight
  for i := 0 to Length(BotLeftCorner_XOffsetsIntArr) - 1 do
  begin
    CornerIndex := IndexOfBotLeftCorner(WindowFeaturesArr, BotLeftCorner_XOffsetsIntArr[i], BotLeftCorner_YOffsetsIntArr[i], BotLeftCorner_SrcIdx[i]);
    for j := 0 to Length(TopLeftCorner_XOffsetsIntArr) - 1 do
      if (BotLeftCorner_XOffsetsIntArr[i] = TopLeftCorner_XOffsetsIntArr[j]) and
         (BotLeftCorner_XOffsetsIntArr[i] = TopLeftCorner_SrcIdx[j]) then
      begin
        if CornerIndex = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.X := BotLeftCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.Y := BotLeftCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCornerSrcIdx := BotLeftCorner_SrcIdx[i];

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.X := TopLeftCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.Y := TopLeftCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCornerSrcIdx := TopLeftCorner_SrcIdx[j];
        end
        else
        begin
          WindowFeaturesArr[CornerIndex].TopLeftCorner.X := TopLeftCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].TopLeftCorner.Y := TopLeftCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].TopLeftCornerSrcIdx := TopLeftCorner_SrcIdx[j];
        end;
      end;

    CornerIndex := IndexOfBotLeftCorner(WindowFeaturesArr, BotLeftCorner_XOffsetsIntArr[i], BotLeftCorner_YOffsetsIntArr[i], BotLeftCorner_SrcIdx[i]);
    for j := 0 to Length(BotRightCorner_YOffsetsIntArr) - 1 do
      if (BotLeftCorner_YOffsetsIntArr[i] = BotRightCorner_YOffsetsIntArr[j]) and
         (BotLeftCorner_SrcIdx[i] = BotRightCorner_SrcIdx[j]) then
      begin
        if CornerIndex = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.X := BotLeftCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCorner.Y := BotLeftCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotLeftCornerSrcIdx := BotLeftCorner_SrcIdx[i];

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.X := BotRightCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.Y := BotRightCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCornerSrcIdx := BotRightCorner_SrcIdx[j];
        end
        else
        begin
          WindowFeaturesArr[CornerIndex].BotRightCorner.X := BotRightCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].BotRightCorner.Y := BotRightCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].BotRightCornerSrcIdx := BotRightCorner_SrcIdx[j];
        end;
      end;
  end;

  //matching TopRight corner with TopLeft, then BotRight
  for i := 0 to Length(TopRightCorner_YOffsetsIntArr) - 1 do
  begin
    CornerIndex := IndexOfTopRightCorner(WindowFeaturesArr, TopRightCorner_XOffsetsIntArr[i], TopRightCorner_YOffsetsIntArr[i], TopRightCorner_SrcIdx[i]);
    for j := 0 to Length(TopLeftCorner_XOffsetsIntArr) - 1 do
      if (TopRightCorner_YOffsetsIntArr[i] = TopLeftCorner_YOffsetsIntArr[j]) and
         (TopRightCorner_SrcIdx[i] = TopLeftCorner_SrcIdx[j]) then
      begin
        if CornerIndex = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.X := TopRightCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.Y := TopRightCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCornerSrcIdx := TopRightCorner_SrcIdx[i];

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.X := TopLeftCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCorner.Y := TopLeftCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopLeftCornerSrcIdx := TopLeftCorner_SrcIdx[j];
        end
        else
        begin
          WindowFeaturesArr[CornerIndex].TopLeftCorner.X := TopLeftCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].TopLeftCorner.Y := TopLeftCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].TopLeftCornerSrcIdx := TopLeftCorner_SrcIdx[j];
        end;
      end;

    CornerIndex := IndexOfTopRightCorner(WindowFeaturesArr, TopRightCorner_XOffsetsIntArr[i], TopRightCorner_YOffsetsIntArr[i], TopRightCorner_SrcIdx[i]);
    for j := 0 to Length(TopRightCorner_XOffsetsIntArr) - 1 do
      if (TopRightCorner_XOffsetsIntArr[i] = BotRightCorner_XOffsetsIntArr[j]) and
         (TopRightCorner_SrcIdx[i] = BotRightCorner_SrcIdx[j]) then
      begin
        if CornerIndex = -1 then
        begin
          SetLength(WindowFeaturesArr, Length(WindowFeaturesArr) + 1);
          InitWindowFeatures(WindowFeaturesArr[Length(WindowFeaturesArr) - 1]);

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.X := TopRightCorner_XOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCorner.Y := TopRightCorner_YOffsetsIntArr[i];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].TopRightCornerSrcIdx := TopRightCorner_SrcIdx[i];

          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.X := BotRightCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCorner.Y := BotRightCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[Length(WindowFeaturesArr) - 1].BotRightCornerSrcIdx := BotRightCorner_SrcIdx[j];
        end
        else
        begin
          WindowFeaturesArr[CornerIndex].BotRightCorner.X := BotRightCorner_XOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].BotRightCorner.Y := BotRightCorner_YOffsetsIntArr[j];
          WindowFeaturesArr[CornerIndex].BotRightCornerSrcIdx := BotRightCorner_SrcIdx[j];
        end;
      end;
  end;

  GetValidItemsFromWindowFeaturesArr(WindowFeaturesArr, ValidWindowFeaturesArr);
  MergeWindowFeaturesArrDuplicates(ValidWindowFeaturesArr, WindowFeaturesArr);
end;


procedure GetAllRequiredFindSubControlActionNames(APluginSettings: TStringList; var AAllRequiredFindSubControlNames: TStringArr);
var
  i, j: Integer;
begin
  for i := 0 to APluginSettings.Count - 1 do   //assume more properties are there, besides FindSubControl action names for corners and edges
    for j := 0 to CMaxRequiredSubControlActions - 1 do
      if APluginSettings.Names[i] = CRequiredSubControlPropertyNames[j] then
      begin
        SetLength(AAllRequiredFindSubControlNames, Length(AAllRequiredFindSubControlNames) + 1);
        AAllRequiredFindSubControlNames[Length(AAllRequiredFindSubControlNames) - 1] := APluginSettings.ValueFromIndex[i];
        Break;
      end;
end;


//ToDo:   refactoring
function ExecutePlugin(APluginReference: Pointer;
                       AListOfPluginSettings: Pointer;
                       AListOfPluginSettingsLen: PDWord;

                       AOnActionPlugin_GetActionCount: TOnActionPlugin_GetActionCount;
                       AOnActionPlugin_GetActionInfoByIndex: TOnActionPlugin_GetActionInfoByIndex;
                       AOnActionPlugin_ExecuteAction: TOnActionPlugin_ExecuteAction;
                       AOnActionPlugin_GetAllTemplateVars: TOnActionPlugin_GetAllTemplateVars;
                       AOnActionPlugin_SetTemplateVar: TOnActionPlugin_SetTemplateVar;
                       AOnActionPlugin_DebugPoint: TOnActionPlugin_DebugPoint): Boolean; cdecl;
var
  ActionCount, i, j, k: Integer;
  ActionType: TClkAction;
  ActionTypeDWord, NameLengthDWord, ListOfPluginSettingsLen: DWord;
  s, Buffer, MatchWindowEdges: string;
  ActionNamePtr, AllTemplateVarsPtr: Pointer;
  ResName, ResValue, PluginSettingsStr, AllVarsStr: string;
  PluginSettings, ListOfAllVars: TStringList;
  AllRequiredFindSubControlNames: TStringArr;
  AllFindSubControlExecutionResults_Corners: TStringArr;
  AllFindSubControlExecutionResults_Edges: TStringArr;
  Control_Left, Control_Top, BorderThickness: Integer;
  WindowFeaturesArr: TWindowFeaturesArr;
  DecodedWindowsResults: TDecodedWindowsResults;
begin
  Result := False;
  try
    DefaultOnActionPlugin_DebugPoint := AOnActionPlugin_DebugPoint;
    DefaultPluginReference := APluginReference;

    if not DbgPoint('Entering ExecutePlugin', '') then     //see ClkDbgSym.ppr for expected statement formats
      Exit;

    ActionCount := AOnActionPlugin_GetActionCount(APluginReference);
    if ActionCount = 0 then
    begin
      ResName := CActionPlugin_ExecutionResultErrorVar;
      ResValue := 'This plugin does not run on an empty template.';
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
      Exit;
    end;

    ResValue := '';
    ResName := '$PluginError$';
    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

    ResName := '$AllControl_XOffsets$';
    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

    ResName := '$AllControl_YOffsets$';
    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

    ListOfPluginSettingsLen := AListOfPluginSettingsLen^;

    PluginSettings := TStringList.Create;
    try
      SetLength(PluginSettingsStr, CMaxSharedStringLength);
      SetPointedContentToString(AListOfPluginSettings, PluginSettingsStr);
      SetLength(PluginSettingsStr, ListOfPluginSettingsLen);
      PluginSettings.Text := PluginSettingsStr;

      //if not DbgPoint('Get BorderThickness', '') then
      //  Exit;

      if PluginSettings.Count < CPropertiesCount then
      begin
        ResName := CActionPlugin_ExecutionResultErrorVar;
        ResValue := 'The plugin is configured with a wrong number of properties: ' + IntToStr(PluginSettings.Count) + ', instead of the expected, ' + IntToStr(CPropertiesCount) + '.';
        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
        Exit;
      end;

      GetAllRequiredFindSubControlActionNames(PluginSettings, AllRequiredFindSubControlNames);
      BorderThickness := StrToIntDef(PluginSettings.ValueFromIndex[CBorderThickness_PropIndex], CDefaultBorderThickness);
      MatchWindowEdges := PluginSettings.ValueFromIndex[CMatchWindowEdges_PropIndex];

      //if not DbgPoint('After getting BorderThickness', 'Read BorderThickness: ' + IntToStr(BorderThickness)) then
      //  Exit;

      //Calling FindControl or CallTemplate, to update $Control_Left$ and $Control_Top$
      if PluginSettings.ValueFromIndex[CParentFindControl_PropIndex] <> '' then
        if not AOnActionPlugin_ExecuteAction(APluginReference, @PluginSettings.ValueFromIndex[CParentFindControl_PropIndex][1]) then  //call FindControl or CallTemplate, before each FindSubControl
        begin
          ResName := CActionPlugin_ExecutionResultErrorVar;
          ResValue := 'The required "' + PluginSettings.ValueFromIndex[CParentFindControl_PropIndex] + '" action has failed on updating $Control_Left$ and $Control_Top$.';
          AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
          Exit;
        end;

      //Get Control_Left and Control_Top values
      SetLength(Buffer, CMaxSharedStringLength + 1);
      AllTemplateVarsPtr := @Buffer[1];
      NameLengthDWord := 0;

      AOnActionPlugin_GetAllTemplateVars(APluginReference, AllTemplateVarsPtr, @NameLengthDWord);  //decode action execution results

      SetPointedContentToString(AllTemplateVarsPtr, AllVarsStr);
      SetLength(AllVarsStr, NameLengthDWord);

      ListOfAllVars := TStringList.Create;
      try
        ListOfAllVars.Text := AllVarsStr;
        Control_Left := StrToIntDef(ListOfAllVars.Values['$Control_Left$'], 0);
        Control_Top := StrToIntDef(ListOfAllVars.Values['$Control_Top$'], 0);
      finally
        ListOfAllVars.Free;
      end;

      //if not DbgPoint('After getting $Control_Left$ and $Control_Top$', 'Read $Control_Left$ and $Control_Top$: ' + IntToStr(Control_Left) + ' : ' + IntToStr(Control_Top)) then
      //  Exit;

      //Executing FindSubControl actions, for getting window corners
      s := 'unset action';
      for i := 0 to ActionCount - 1 do
      begin
        SetLength(Buffer, CMaxSharedStringLength + 1);
        ActionNamePtr := @Buffer[1];
        NameLengthDWord := 0;

        AOnActionPlugin_GetActionInfoByIndex(APluginReference, i, ActionNamePtr, @NameLengthDWord, @ActionTypeDWord);
        SetPointedContentToString(ActionNamePtr, s);
        SetLength(s, NameLengthDWord);

        if ActionTypeDWord <> $FFFFFFFF then
        begin
          ActionType := TClkAction(ActionTypeDWord);

          if ActionType in [acFindSubControl, acPlugin] then
            for j := CFindSubControlTopLeftCorner_PropIndex to CFindSubControlBotRightCorner_PropIndex do  //corners:  without "- 1"
              if s = AllRequiredFindSubControlNames[j] then
              begin
                //if not DbgPoint('Calling FindControl or CallTemplate (corners)', PluginSettings.ValueFromIndex[CParentFindControl_PropIndex]) then
                //  Exit;

                if PluginSettings.ValueFromIndex[CParentFindControl_PropIndex] <> '' then
                  if not AOnActionPlugin_ExecuteAction(APluginReference, @PluginSettings.ValueFromIndex[CParentFindControl_PropIndex][1]) then  //call FindControl or CallTemplate, before each FindSubControl
                  begin
                    ResName := CActionPlugin_ExecutionResultErrorVar;
                    ResValue := 'The required "' + PluginSettings.ValueFromIndex[CParentFindControl_PropIndex] + '" action has failed on: ' + s;  //example
                    AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                    Exit;
                  end;

                if not AOnActionPlugin_ExecuteAction(APluginReference, @s[1]) then
                begin
                  //ResName := CActionPlugin_ExecutionResultErrorVar;
                  //ResValue := 'One of the required FindSubControl actions has failed: ' + s;  //example
                  //AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                  //Exit;
                end;

                SetLength(Buffer, CMaxSharedStringLength + 1);
                AllTemplateVarsPtr := @Buffer[1];
                NameLengthDWord := 0;

                AOnActionPlugin_GetAllTemplateVars(APluginReference, AllTemplateVarsPtr, @NameLengthDWord);  //decode action execution results

                SetPointedContentToString(AllTemplateVarsPtr, AllVarsStr);
                SetLength(AllVarsStr, NameLengthDWord);

                SetLength(AllFindSubControlExecutionResults_Corners, Length(AllFindSubControlExecutionResults_Corners) + 1);
                AllFindSubControlExecutionResults_Corners[Length(AllFindSubControlExecutionResults_Corners) - 1] := AllVarsStr;
              end;
        end;
      end;   //for  i := 0 to ActionCount - 1

      if Length(AllFindSubControlExecutionResults_Corners) <> 4 then   //expecting 4 actions
      begin
        ResName := CActionPlugin_ExecutionResultErrorVar;
        ResValue := 'Not all the required FindSubControl actions are found in the current template. Found ' +
                    IntToStr(Length(AllFindSubControlExecutionResults_Corners)) +
                    ' action(s).  PluginSettings: ' + PluginSettingsStr;

        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

        DbgPoint('Invalid template', ResValue);

        Exit;
      end;

      //if not DbgPoint('Decoding windows', '') then
      //  Exit;

      //Actual window decoding:
      DecodeWindows(AllFindSubControlExecutionResults_Corners, WindowFeaturesArr);
      WindowFeaturesArrToString(WindowFeaturesArr, Control_Left, Control_Top, BorderThickness, DecodedWindowsResults);

      //Set results
      ResName := CActionPlugin_ExecutionResultVar_XOffset;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @DecodedWindowsResults.ResultsX[1]);

      ResName := CActionPlugin_ExecutionResultVar_YOffset;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @DecodedWindowsResults.ResultsY[1]);

      ResName := CActionPlugin_ExecutionResultVar_Width;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @DecodedWindowsResults.ResultsW[1]);

      ResName := CActionPlugin_ExecutionResultVar_Height;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @DecodedWindowsResults.ResultsH[1]);

      ResName := CActionPlugin_ExecutionResultVar_Control_Lefts;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @DecodedWindowsResults.ControlLefts[1]);

      ResName := CActionPlugin_ExecutionResultVar_Control_Tops;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @DecodedWindowsResults.ControlTops[1]);

      ResName := CActionPlugin_ExecutionResultVar_Control_Rights;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @DecodedWindowsResults.ControlRights[1]);

      ResName := CActionPlugin_ExecutionResultVar_Control_Bottoms;
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @DecodedWindowsResults.ControlBottoms[1]);

      if MatchWindowEdges = 'True' then
      begin
        DbgPoint('Searching for window edges', 'start');

        SetLength(AllFindSubControlExecutionResults_Edges, 0);

        //Executing FindSubControl actions
        s := 'unset action';
        for i := 0 to ActionCount - 1 do
        begin
          SetLength(Buffer, CMaxSharedStringLength + 1);
          ActionNamePtr := @Buffer[1];
          NameLengthDWord := 0;

          AOnActionPlugin_GetActionInfoByIndex(APluginReference, i, ActionNamePtr, @NameLengthDWord, @ActionTypeDWord);
          SetPointedContentToString(ActionNamePtr, s);
          SetLength(s, NameLengthDWord);

          if ActionTypeDWord <> $FFFFFFFF then
          begin
            ActionType := TClkAction(ActionTypeDWord);

            if ActionType in [acFindSubControl, acPlugin] then
              for j := CFindSubControlLeftEdge_PropIndex to CFindSubControlBottomEdge_PropIndex do    //edges:  without "- 1"
                if s = AllRequiredFindSubControlNames[j] then
                  for k := 0 to Length(WindowFeaturesArr) - 1 do  //Setting search area for current edge
                  begin
                    //if not DbgPoint('Calling FindControl or CallTemplate (edges)', PluginSettings.ValueFromIndex[CParentFindControl_PropIndex]) then
                    //  Exit;

                    if PluginSettings.ValueFromIndex[CParentFindControl_PropIndex] <> '' then
                      if not AOnActionPlugin_ExecuteAction(APluginReference, @PluginSettings.ValueFromIndex[CParentFindControl_PropIndex][1]) then  //call FindControl or CallTemplate, before each FindSubControl
                      begin
                        ResName := CActionPlugin_ExecutionResultErrorVar;
                        ResValue := 'The required "' + PluginSettings.ValueFromIndex[CParentFindControl_PropIndex] + '" action has failed on: ' + s;  //example
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                        Exit;
                      end;

                    //if not DbgPoint('Setting search area for current edge', 'Edge property index: ' + IntToStr(j) + '  Name: ' + s) then
                    //  Exit;

                    //DbgPoint('Matching edge', 'Current edge: ' + CEdgeNames[j] + '   Corner index: ' + IntToStr(k));

                    //Setting search area for every type of edges
                    case j of
                      CFindSubControlLeftEdge_PropIndex:
                      begin
                        ResName := CActionPlugin_SearchArea_WinEdgeLeftVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopLeftCorner.X);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeTopVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopLeftCorner.Y + BorderThickness);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeRightVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopLeftCorner.X + BorderThickness);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeBottomVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].BotLeftCorner.Y + 1);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := '$LE_Height$';
                        ResValue := IntToStr(WindowFeaturesArr[k].BotLeftCorner.Y - WindowFeaturesArr[k].TopLeftCorner.Y - BorderThickness - 1); // "+ 1" gives a single result, but that is too tight
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                      end;

                      CFindSubControlTopEdge_PropIndex:
                      begin
                        ResName := CActionPlugin_SearchArea_WinEdgeLeftVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopLeftCorner.X + BorderThickness);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeTopVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopLeftCorner.Y);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeRightVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopRightCorner.X - 102);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeBottomVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopLeftCorner.Y + BorderThickness + 1);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := '$TE_Width$';
                        ResValue := IntToStr(WindowFeaturesArr[k].TopRightCorner.X - WindowFeaturesArr[k].TopLeftCorner.X - BorderThickness - 102);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                      end;

                      CFindSubControlRightEdge_PropIndex:
                      begin
                        ResName := CActionPlugin_SearchArea_WinEdgeLeftVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopRightCorner.X);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeTopVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopRightCorner.Y + BorderThickness);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeRightVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].TopRightCorner.X + BorderThickness);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeBottomVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].BotRightCorner.Y + 1);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := '$LE_Height$';
                        ResValue := IntToStr(WindowFeaturesArr[k].BotLeftCorner.Y - WindowFeaturesArr[k].TopLeftCorner.Y - BorderThickness - 1);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                      end;

                      CFindSubControlBottomEdge_PropIndex:                   ///////////////////////// ToDo:  verify search area
                      begin
                        ResName := CActionPlugin_SearchArea_WinEdgeLeftVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].BotLeftCorner.X + BorderThickness);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeTopVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].BotLeftCorner.Y - 1);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeRightVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].BotRightCorner.X);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := CActionPlugin_SearchArea_WinEdgeBottomVar;
                        ResValue := IntToStr(WindowFeaturesArr[k].BotLeftCorner.Y + BorderThickness);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);

                        ResName := '$TE_Width$';
                        ResValue := IntToStr(WindowFeaturesArr[k].BotRightCorner.X - WindowFeaturesArr[k].BotLeftCorner.X - BorderThickness);
                        AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                      end;
                    end;

                    if not AOnActionPlugin_ExecuteAction(APluginReference, @s[1]) then
                    begin
                      //ResName := CActionPlugin_ExecutionResultErrorVar;
                      //ResValue := 'One of the required FindSubControl actions has failed: ' + s;  //example
                      //AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
                      //Exit;
                    end;

                    if not DbgPoint('After matching edge', 'Current edge: ' + CEdgeNames[j] + '   Corner index: ' + IntToStr(k)) then
                      Exit;

                    SetLength(Buffer, CMaxSharedStringLength + 1);
                    AllTemplateVarsPtr := @Buffer[1];
                    NameLengthDWord := 0;

                    AOnActionPlugin_GetAllTemplateVars(APluginReference, AllTemplateVarsPtr, @NameLengthDWord);  //decode action execution results

                    SetPointedContentToString(AllTemplateVarsPtr, AllVarsStr);
                    SetLength(AllVarsStr, NameLengthDWord);

                    SetLength(AllFindSubControlExecutionResults_Edges, Length(AllFindSubControlExecutionResults_Edges) + 1);
                    AllFindSubControlExecutionResults_Edges[Length(AllFindSubControlExecutionResults_Edges) - 1] := AllVarsStr;


                    ListOfAllVars := TStringList.Create;
                    try
                      ListOfAllVars.Text := AllVarsStr;
                      DbgPoint('Edge matching status', '  ' + ListOfAllVars.Values['$ResultedErrorCount$'] + '   ' + ListOfAllVars.Values['$AllControl_ResultedErrorCount$'] + ' ========');
                    finally
                      ListOfAllVars.Free;
                    end;
                  end; //for k
          end;
        end;   //for  i := 0 to ActionCount - 1

        DbgPoint('Done searching for window edges', 'done');
      end; //MatchWindowEdges
    finally
      PluginSettings.Free;
    end;

    DbgPoint('Exiting plugin', 'done');

    Result := True;

  except
    on E: Exception do
    begin
      ResName := CActionPlugin_ExecutionResultErrorVar;
      ResValue := 'Plugin exception: "' + E.Message + '".';
      AOnActionPlugin_SetTemplateVar(APluginReference, @ResName[1], @ResValue[1]);
    end;
  end;
end;


exports
  GetAPIVersion,
  GetListOfProperties,
  ExecutePlugin;

begin
end.

